{"version":3,"file":"DataTableRaw.stories-1e0dd62b.js","sources":["../../src/DataTable/DataTableRaw.stories.tsx"],"sourcesContent":["import { ComponentStoryFn, Meta } from '@storybook/react';\nimport { Table } from '@tanstack/react-table';\nimport { atom, useAtom } from 'jotai';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DataTableRaw } from './DataTableRaw';\nimport { Fruit, fruitColumns, fruitsData } from './test-data';\nimport { useDataTable } from './useDataTable';\nconst disableControl = () => ({\n  table: {\n    disable: true\n  }\n});\nexport default ({\n  title: 'DataTable/DataTable Submit All',\n  component: DataTableRaw,\n  args: {\n    config: {\n      sortable: true,\n      width: '100%',\n      height: '100%',\n      virtual: false\n    },\n    header: {\n      captionPadding: '1rem',\n      tableCaption: 'Fruits'\n    },\n    filters: {\n      globalFilter: true\n    }\n  },\n  argTypes: {\n    data: disableControl(),\n    columns: disableControl(),\n    table: disableControl()\n  }\n} as Meta<typeof DataTableRaw>);\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nconst editsAtom = atom({});\nexport const SubmitAll: ComponentStoryFn<typeof DataTableRaw<Fruit>> = (props: any) => {\n  const [_, skipAutoResetPageIndex] = useSkipper();\n  const [data, setData] = useState(fruitsData);\n  const table = useDataTable<Fruit>({\n    ...props,\n    // Provide our updateData function to our table meta\n    meta: {\n      updateData: (rowIndex: number, columnId: string, value: any) => {\n        // Skip age index reset until after next rerender\n        skipAutoResetPageIndex();\n        setData(old => {\n          return old.map((row, index) => {\n            if (index === rowIndex) {\n              return {\n                ...old[rowIndex]!,\n                [columnId]: value\n              };\n            }\n            return row;\n          });\n        });\n      }\n    },\n    data,\n    columns: [...fruitColumns, {\n      accessorKey: 'unit',\n      header: 'Unit',\n      cell: ({\n        getValue,\n        row,\n        column,\n        table\n      }) => {\n        const initialValue = getValue();\n        const [value, setValue] = useState('');\n\n        // If the initialValue is changed external, sync it up with our state\n        useEffect(() => {\n          setValue(initialValue);\n        }, [initialValue]);\n        const [edits] = useAtom(editsAtom);\n        const id = row.id;\n        if ((edits as any)[id]) {\n          return <input type=\"text\" value={value} onChange={e => {\n            setValue(e.target.value);\n          }} onBlur={() => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            table.options?.meta?.updateData(row.index, column.id, value);\n          }} />;\n        }\n        return getValue();\n      }\n    }, {\n      id: 'edit',\n      cell: props => {\n        const [_, setEdits] = useAtom(editsAtom);\n        return <button onClick={() => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          setEdits(old => {\n            const id = props.row.id;\n            const stored = (old as any)[id] ?? false;\n            return {\n              ...old,\n              [id]: !stored\n            };\n          });\n        }}>\n              edit\n            </button>;\n      }\n    }]\n  });\n  return <>\n      <SubmitAllButton table={table} />\n      <DataTableRaw {...props} table={table} />\n    </>;\n};\nfunction SubmitAllButton({\n  table\n}: {\n  table: Table<Fruit>;\n}) {\n  const [edits] = useAtom(editsAtom);\n  return <button onClick={() => {\n    const changes = Object.keys(edits).reduce((acc, curr) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      edits[curr] && acc.push(table.getRow(curr).original);\n      return acc;\n    }, []);\n    console.log(changes);\n  }}>\n      Submit All\n    </button>;\n}\nfunction useSkipper() {\n  const shouldSkipRef = useRef(true);\n  const shouldSkip = shouldSkipRef.current;\n\n  // Wrap a function with this to skip a pagination reset temporarily\n  const skip = useCallback(() => {\n    shouldSkipRef.current = false;\n  }, []);\n  useEffect(() => {\n    shouldSkipRef.current = true;\n  });\n  return ([shouldSkip, skip] as const);\n}\nSubmitAll.parameters = {\n  ...SubmitAll.parameters,\n  docs: {\n    ...SubmitAll.parameters?.docs,\n    source: {\n      originalSource: \"(props: any) => {\\n  const [_, skipAutoResetPageIndex] = useSkipper();\\n  const [data, setData] = useState(fruitsData);\\n  const table = useDataTable<Fruit>({\\n    ...props,\\n    // Provide our updateData function to our table meta\\n    meta: {\\n      updateData: (rowIndex: number, columnId: string, value: any) => {\\n        // Skip age index reset until after next rerender\\n        skipAutoResetPageIndex();\\n        setData(old => {\\n          return old.map((row, index) => {\\n            if (index === rowIndex) {\\n              return {\\n                ...old[rowIndex]!,\\n                [columnId]: value\\n              };\\n            }\\n            return row;\\n          });\\n        });\\n      }\\n    },\\n    data,\\n    columns: [...fruitColumns, {\\n      accessorKey: 'unit',\\n      header: 'Unit',\\n      cell: ({\\n        getValue,\\n        row,\\n        column,\\n        table\\n      }) => {\\n        const initialValue = getValue();\\n        const [value, setValue] = useState('');\\n\\n        // If the initialValue is changed external, sync it up with our state\\n        useEffect(() => {\\n          setValue(initialValue);\\n        }, [initialValue]);\\n        const [edits] = useAtom(editsAtom);\\n        const id = row.id;\\n        if ((edits as any)[id]) {\\n          return <input type=\\\"text\\\" value={value} onChange={e => {\\n            setValue(e.target.value);\\n          }} onBlur={() => {\\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n            // @ts-ignore\\n            table.options?.meta?.updateData(row.index, column.id, value);\\n          }} />;\\n        }\\n        return getValue();\\n      }\\n    }, {\\n      id: 'edit',\\n      cell: props => {\\n        const [_, setEdits] = useAtom(editsAtom);\\n        return <button onClick={() => {\\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n          // @ts-ignore\\n          setEdits(old => {\\n            const id = props.row.id;\\n            const stored = (old as any)[id] ?? false;\\n            return {\\n              ...old,\\n              [id]: !stored\\n            };\\n          });\\n        }}>\\n              edit\\n            </button>;\\n      }\\n    }]\\n  });\\n  return <>\\n      <SubmitAllButton table={table} />\\n      <DataTableRaw {...props} table={table} />\\n    </>;\\n}\",\n      ...SubmitAll.parameters?.docs?.source\n    }\n  }\n};"],"names":["disableControl","DataTableRaw_stories","DataTableRaw","editsAtom","atom","SubmitAll","props","_","skipAutoResetPageIndex","useSkipper","data","setData","useState","fruitsData","table","useDataTable","rowIndex","columnId","value","old","row","index","fruitColumns","getValue","column","initialValue","setValue","useEffect","edits","useAtom","id","e","setEdits","jsx","stored","jsxs","Fragment","SubmitAllButton","changes","acc","curr","shouldSkipRef","useRef","shouldSkip","skip","useCallback","_a","_c","_b"],"mappings":"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"}