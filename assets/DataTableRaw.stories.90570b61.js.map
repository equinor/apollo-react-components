{"version":3,"file":"DataTableRaw.stories.90570b61.js","sources":["../../src/DataTable/DataTableRaw.stories.tsx"],"sourcesContent":["import { ComponentStoryFn, Meta } from '@storybook/react'\nimport { Table } from '@tanstack/react-table'\nimport { atom, useAtom } from 'jotai'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { DataTableRaw } from './DataTableRaw'\nimport { Fruit, fruitColumns, fruitsData } from './test-data'\nimport { useDataTable } from './useDataTable'\n\nconst disableControl = () => ({\n  table: {\n    disable: true,\n  },\n})\n\nexport default {\n  title: 'DataTable/DataTable Submit All',\n  component: DataTableRaw,\n  args: {\n    config: {\n      sortable: true,\n      width: '100%',\n      height: '100%',\n      virtual: false,\n    },\n    header: {\n      captionPadding: '1rem',\n      tableCaption: 'Fruits',\n    },\n    filters: {\n      globalFilter: true,\n    },\n  },\n  argTypes: {\n    data: disableControl(),\n    columns: disableControl(),\n    table: disableControl(),\n  },\n} as Meta<typeof DataTableRaw>\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nconst editsAtom = atom({})\n\nexport const SubmitAll: ComponentStoryFn<typeof DataTableRaw<Fruit>> = (props: any) => {\n  const [_, skipAutoResetPageIndex] = useSkipper()\n  const [data, setData] = useState(fruitsData)\n  const table = useDataTable<Fruit>({\n    ...props,\n    // Provide our updateData function to our table meta\n    meta: {\n      updateData: (rowIndex: number, columnId: string, value: any) => {\n        // Skip age index reset until after next rerender\n        skipAutoResetPageIndex()\n        setData((old) => {\n          return old.map((row, index) => {\n            if (index === rowIndex) {\n              return {\n                ...old[rowIndex]!,\n                [columnId]: value,\n              }\n            }\n            return row\n          })\n        })\n      },\n    },\n    data,\n    columns: [\n      ...fruitColumns,\n      {\n        accessorKey: 'unit',\n        header: 'Unit',\n        cell: ({ getValue, row, column, table }) => {\n          const initialValue = getValue()\n          const [value, setValue] = useState('')\n\n          // If the initialValue is changed external, sync it up with our state\n          useEffect(() => {\n            setValue(initialValue)\n          }, [initialValue])\n          const [edits] = useAtom(editsAtom)\n          const id = row.id\n          if ((edits as any)[id]) {\n            return (\n              <input\n                type=\"text\"\n                value={value}\n                onChange={(e) => {\n                  setValue(e.target.value)\n                }}\n                onBlur={() => {\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  table.options?.meta?.updateData(row.index, column.id, value)\n                }}\n              />\n            )\n          }\n          return getValue()\n        },\n      },\n      {\n        id: 'edit',\n        cell: (props) => {\n          const [_, setEdits] = useAtom(editsAtom)\n          return (\n            <button\n              onClick={() => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                setEdits((old) => {\n                  const id = props.row.id\n                  const stored = (old as any)[id] ?? false\n                  return { ...old, [id]: !stored }\n                })\n              }}\n            >\n              edit\n            </button>\n          )\n        },\n      },\n    ],\n  })\n\n  return (\n    <>\n      <SubmitAllButton table={table} />\n      <DataTableRaw {...props} table={table} />\n    </>\n  )\n}\n\nfunction SubmitAllButton({ table }: { table: Table<Fruit> }) {\n  const [edits] = useAtom(editsAtom)\n  return (\n    <button\n      onClick={() => {\n        const changes = Object.keys(edits).reduce((acc, curr) => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          edits[curr] && acc.push(table.getRow(curr).original)\n          return acc\n        }, [])\n        console.log(changes)\n      }}\n    >\n      Submit All\n    </button>\n  )\n}\n\nfunction useSkipper() {\n  const shouldSkipRef = useRef(true)\n  const shouldSkip = shouldSkipRef.current\n\n  // Wrap a function with this to skip a pagination reset temporarily\n  const skip = useCallback(() => {\n    shouldSkipRef.current = false\n  }, [])\n\n  useEffect(() => {\n    shouldSkipRef.current = true\n  })\n\n  return [shouldSkip, skip] as const\n}\n"],"names":["disableControl","table","disable","DataTableRaw_stories","title","component","DataTableRaw","args","config","sortable","width","height","virtual","header","captionPadding","tableCaption","filters","globalFilter","argTypes","data","columns","editsAtom","atom","SubmitAll","props","_","skipAutoResetPageIndex","useSkipper","setData","useState","fruitsData","useDataTable","meta","updateData","rowIndex","columnId","value","old","map","row","index","fruitColumns","accessorKey","cell","getValue","column","initialValue","setValue","useEffect","edits","useAtom","id","e","target","options","setEdits","stored","_Fragment","_jsx","SubmitAllButton","changes","Object","keys","reduce","acc","curr","push","getRow","original","console","log","shouldSkipRef","useRef","shouldSkip","current","skip","useCallback"],"mappings":"oPAQA,MAAMA,EAAiB,KAAO,CAC5BC,MAAO,CACLC,QAAS,EACX,CACF,GAEeC,EAAA,CACbC,MAAO,iCACPC,UAAWC,EACXC,KAAM,CACJC,OAAQ,CACNC,SAAU,GACVC,MAAO,OACPC,OAAQ,OACRC,QAAS,EACX,EACAC,OAAQ,CACNC,eAAgB,OAChBC,aAAc,QAChB,EACAC,QAAS,CACPC,aAAc,EAChB,CACF,EACAC,SAAU,CACRC,KAAMnB,EAAgB,EACtBoB,QAASpB,EAAgB,EACzBC,MAAOD,EAAc,CACvB,CACF,EAIMqB,EAAYC,EAAK,CAAA,CAAE,EAEZC,EAA2DC,GAAe,CACrF,KAAM,CAACC,EAAGC,CAAsB,EAAIC,EAAY,EAC1C,CAACR,EAAMS,CAAO,EAAIC,mBAASC,CAAU,EACrC7B,EAAQ8B,EAAoB,CAChC,GAAGP,EAEHQ,KAAM,CACJC,WAAY,CAACC,EAAkBC,EAAkBC,IAAe,CAEtCV,IACxBE,EAAiBS,GACRA,EAAIC,IAAI,CAACC,EAAKC,IACfA,IAAUN,EACL,CACL,GAAGG,EAAIH,GACP,CAACC,GAAWC,CAAAA,EAGTG,CACR,CACF,CACH,CACF,EACApB,KAAAA,EACAC,QAAS,CACP,GAAGqB,EACH,CACEC,YAAa,OACb7B,OAAQ,OACR8B,KAAM,CAAC,CAAEC,SAAAA,EAAUL,IAAAA,EAAKM,OAAAA,EAAQ5C,MAAAA,CAAAA,IAAY,CAC1C,MAAM6C,EAAeF,IACf,CAACR,EAAOW,CAAQ,EAAIlB,mBAAS,EAAE,EAGrCmB,EAAAA,QAAAA,UAAU,IAAM,CACdD,EAASD,CAAY,CAAA,EACpB,CAACA,CAAY,CAAC,EACjB,KAAM,CAACG,CAAK,EAAIC,EAAQ7B,CAAS,EAC3B8B,EAAKZ,EAAIY,GACf,OAAKF,EAAcE,KAEf,QAAA,CACE,KAAK,OACL,MAAAf,EACA,SAAiBgB,GAAA,CACNA,EAAAA,EAAEC,OAAOjB,KAAK,CACzB,EACA,OAAQ,IAAM,UAGZnC,GAAAA,EAAAA,EAAMqD,UAANrD,YAAAA,EAAe+B,OAAf/B,MAAAA,EAAqBgC,WAAWM,EAAIC,MAAOK,EAAOM,GAAIf,EACxD,CAAA,CACA,EAGCQ,EAAU,CACnB,CAAA,EAEF,CACEO,GAAI,OACJR,KAAOnB,GAAU,CACf,KAAM,CAACC,EAAG8B,CAAQ,EAAIL,EAAQ7B,CAAS,EACvC,SACE,SAAA,CACE,QAAS,IAAM,CAGbkC,EAAkBlB,GAAA,OACVc,MAAAA,EAAK3B,EAAMe,IAAIY,GACfK,GAAUnB,EAAAA,EAAYc,KAAZd,KAAAA,EAAmB,GAC5B,MAAA,CAAE,GAAGA,EAAK,CAACc,GAAK,CAACK,CAAAA,CAAO,CAChC,CACH,EAAE,SAAA,MAAA,CAGK,CAEb,CAAA,CACD,CAAA,CAEJ,EAED,SACEC,EAAA,CAAA,SAAA,CACEC,EAACC,EAAe,CAAC,MAAA1D,CAAA,CAAgB,EACjCyD,EAACpD,EAAY,CAAA,GAAKkB,EAAO,MAAAvB,CAAA,CAAgB,CAAA,CAAA,CACxC,CAEP,EAEA,SAAS0D,EAAgB,CAAE1D,MAAAA,CAA+B,EAAG,CAC3D,KAAM,CAACgD,CAAK,EAAIC,EAAQ7B,CAAS,EACjC,SACE,SAAA,CACE,QAAS,IAAM,CACPuC,MAAAA,EAAUC,OAAOC,KAAKb,CAAK,EAAEc,OAAO,CAACC,EAAKC,KAG9ChB,EAAMgB,IAASD,EAAIE,KAAKjE,EAAMkE,OAAOF,CAAI,EAAEG,QAAQ,EAC5CJ,GACN,CAAE,CAAA,EACLK,QAAQC,IAAIV,CAAO,CACrB,EAAE,SAAA,YAAA,CAGK,CAEb,CAEA,SAASjC,GAAa,CACd4C,MAAAA,EAAgBC,iBAAO,EAAI,EAC3BC,EAAaF,EAAcG,QAG3BC,EAAOC,EAAAA,QAAAA,YAAY,IAAM,CAC7BL,EAAcG,QAAU,EAC1B,EAAG,CAAE,CAAA,EAEL1B,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACduB,EAAcG,QAAU,EAAA,CACzB,EAEM,CAACD,EAAYE,CAAI,CAC1B"}